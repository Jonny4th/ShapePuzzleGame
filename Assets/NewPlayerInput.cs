//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/NewPlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @NewPlayerInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @NewPlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""NewPlayerInput"",
    ""maps"": [
        {
            ""name"": ""Puzzle Controls"",
            ""id"": ""933754f8-fab1-475b-b70c-61ca4e05b6dc"",
            ""actions"": [
                {
                    ""name"": ""MoveShape"",
                    ""type"": ""Value"",
                    ""id"": ""d9461336-d71d-46b0-aeba-eac4be23fb4f"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RotateBlock"",
                    ""type"": ""Button"",
                    ""id"": ""45452936-6228-43b6-a31d-7694ada368bd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RotateView"",
                    ""type"": ""Button"",
                    ""id"": ""b18d41a0-0b5b-4534-b8c1-c10022e2bbaf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ToggleTiltAngle"",
                    ""type"": ""Button"",
                    ""id"": ""3397d269-52d7-43d3-b386-3fff02708d57"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ToggleSelection"",
                    ""type"": ""Button"",
                    ""id"": ""f60efdef-6a78-4717-adc0-2f03f3e3f38c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""a83a15f0-5444-4982-958d-5f981100b2c4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Select"",
                    ""type"": ""Button"",
                    ""id"": ""50413d75-a55b-4613-b037-45c3d2a9fd26"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Deselect"",
                    ""type"": ""Button"",
                    ""id"": ""d2421e3a-b91f-49ce-bbe2-b49c2c070a15"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Move3axis"",
                    ""id"": ""97f00437-b640-48a5-b801-784d76a86a9e"",
                    ""path"": ""3DVector(mode=1)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveShape"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""a48e47bc-2411-4f1b-bfba-4b66bf620351"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyBoard"",
                    ""action"": ""MoveShape"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""6bd2b7e4-45b9-4f83-bc89-bdf3c423985b"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyBoard"",
                    ""action"": ""MoveShape"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""forward"",
                    ""id"": ""50f45c00-32e8-45a6-b4ac-1382bf518250"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyBoard"",
                    ""action"": ""MoveShape"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""backward"",
                    ""id"": ""794114b6-56e3-460c-b197-a621609e1b01"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyBoard"",
                    ""action"": ""MoveShape"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""0dddfd44-9bfb-4362-be79-33410e925fde"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyBoard"",
                    ""action"": ""MoveShape"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""32597209-d6e8-4f3e-a6b8-5d2e75c29663"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyBoard"",
                    ""action"": ""MoveShape"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""3D Vector"",
                    ""id"": ""39164afe-ba38-4472-9ddd-321ba4e07bd8"",
                    ""path"": ""3DVector(mode=2)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveShape"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""f6b8d3f1-02c2-45ad-9312-7c7d72722048"",
                    ""path"": ""<Gamepad>/dpad/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""GamePad"",
                    ""action"": ""MoveShape"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""f6a2081f-353d-44c2-a320-c802eec48840"",
                    ""path"": ""<Gamepad>/dpad/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""GamePad"",
                    ""action"": ""MoveShape"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""forward"",
                    ""id"": ""732d24d5-8b0d-4c76-b107-fa142dacb6fe"",
                    ""path"": ""<Gamepad>/rightStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""GamePad"",
                    ""action"": ""MoveShape"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""backward"",
                    ""id"": ""9821ed67-4869-435c-ac48-a1328162791e"",
                    ""path"": ""<Gamepad>/rightStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""GamePad"",
                    ""action"": ""MoveShape"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""2eaf683b-3446-4a29-819c-4839f736644b"",
                    ""path"": ""<Gamepad>/rightStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""GamePad"",
                    ""action"": ""MoveShape"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""2fe1ab84-e022-4774-8ae5-c8a3510b2189"",
                    ""path"": ""<Gamepad>/rightStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""GamePad"",
                    ""action"": ""MoveShape"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""9633d960-ecfd-4205-8ef7-6768a3568ee0"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""GamePad"",
                    ""action"": ""ToggleSelection"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""40d63c64-75d0-4cbe-8c81-a7dc172892e5"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": ""KeyBoard"",
                    ""action"": ""ToggleSelection"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""46610f57-12a4-40e8-9e2a-c7b7b75b1db0"",
                    ""path"": ""<Keyboard>/numpad0"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyBoard"",
                    ""action"": ""ToggleTiltAngle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""af2b7cbd-6999-42f4-8578-efcc7cd83a09"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateView"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""49ca6365-7f34-49bc-b387-798245be8840"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyBoard"",
                    ""action"": ""RotateView"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""8d240aa0-ab8e-42a7-98f1-6b5e5d416b73"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyBoard"",
                    ""action"": ""RotateView"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""3d5059bc-c47f-4a4c-8175-4734be39e67d"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""GamePad"",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""95b0e703-05b7-4207-8b43-89452ec236dc"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyBoard"",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ca8d3d06-e8e6-4602-bfcf-724f0742d2e3"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyBoard"",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fe979fe2-d034-4147-99e6-3be75cac63e2"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyBoard"",
                    ""action"": ""Deselect"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Menu"",
            ""id"": ""1e97f71f-18c8-49b8-b147-4a3d8cd776f7"",
            ""actions"": [
                {
                    ""name"": ""Choose"",
                    ""type"": ""Button"",
                    ""id"": ""e5147dae-f691-464d-a67a-3ba919b74733"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Select"",
                    ""type"": ""Button"",
                    ""id"": ""1aede6a7-2fd4-4c04-b7ed-c800c042f184"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Arrows"",
                    ""id"": ""ba318258-11f9-4c9c-ac62-ebca84d68a09"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Choose"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""59b920c7-703a-4969-805c-cabceb9d3dc0"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyBoard"",
                    ""action"": ""Choose"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""91461697-a999-43e2-a1cf-cbb04cd60a7e"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyBoard"",
                    ""action"": ""Choose"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""WS"",
                    ""id"": ""49e558c3-eba2-4d9f-a67e-22d35bf6167a"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Choose"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""91d515f4-ef26-4f6b-9cb7-3012c4f51d27"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyBoard"",
                    ""action"": ""Choose"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""a1147ed0-398a-4976-baa8-e98ee9b3e2ea"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyBoard"",
                    ""action"": ""Choose"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""e227cdff-3e82-4c0b-9753-b84719dd56c3"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyBoard"",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""KeyBoard"",
            ""bindingGroup"": ""KeyBoard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": true,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""GamePad"",
            ""bindingGroup"": ""GamePad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Puzzle Controls
        m_PuzzleControls = asset.FindActionMap("Puzzle Controls", throwIfNotFound: true);
        m_PuzzleControls_MoveShape = m_PuzzleControls.FindAction("MoveShape", throwIfNotFound: true);
        m_PuzzleControls_RotateBlock = m_PuzzleControls.FindAction("RotateBlock", throwIfNotFound: true);
        m_PuzzleControls_RotateView = m_PuzzleControls.FindAction("RotateView", throwIfNotFound: true);
        m_PuzzleControls_ToggleTiltAngle = m_PuzzleControls.FindAction("ToggleTiltAngle", throwIfNotFound: true);
        m_PuzzleControls_ToggleSelection = m_PuzzleControls.FindAction("ToggleSelection", throwIfNotFound: true);
        m_PuzzleControls_Pause = m_PuzzleControls.FindAction("Pause", throwIfNotFound: true);
        m_PuzzleControls_Select = m_PuzzleControls.FindAction("Select", throwIfNotFound: true);
        m_PuzzleControls_Deselect = m_PuzzleControls.FindAction("Deselect", throwIfNotFound: true);
        // Menu
        m_Menu = asset.FindActionMap("Menu", throwIfNotFound: true);
        m_Menu_Choose = m_Menu.FindAction("Choose", throwIfNotFound: true);
        m_Menu_Select = m_Menu.FindAction("Select", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Puzzle Controls
    private readonly InputActionMap m_PuzzleControls;
    private IPuzzleControlsActions m_PuzzleControlsActionsCallbackInterface;
    private readonly InputAction m_PuzzleControls_MoveShape;
    private readonly InputAction m_PuzzleControls_RotateBlock;
    private readonly InputAction m_PuzzleControls_RotateView;
    private readonly InputAction m_PuzzleControls_ToggleTiltAngle;
    private readonly InputAction m_PuzzleControls_ToggleSelection;
    private readonly InputAction m_PuzzleControls_Pause;
    private readonly InputAction m_PuzzleControls_Select;
    private readonly InputAction m_PuzzleControls_Deselect;
    public struct PuzzleControlsActions
    {
        private @NewPlayerInput m_Wrapper;
        public PuzzleControlsActions(@NewPlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @MoveShape => m_Wrapper.m_PuzzleControls_MoveShape;
        public InputAction @RotateBlock => m_Wrapper.m_PuzzleControls_RotateBlock;
        public InputAction @RotateView => m_Wrapper.m_PuzzleControls_RotateView;
        public InputAction @ToggleTiltAngle => m_Wrapper.m_PuzzleControls_ToggleTiltAngle;
        public InputAction @ToggleSelection => m_Wrapper.m_PuzzleControls_ToggleSelection;
        public InputAction @Pause => m_Wrapper.m_PuzzleControls_Pause;
        public InputAction @Select => m_Wrapper.m_PuzzleControls_Select;
        public InputAction @Deselect => m_Wrapper.m_PuzzleControls_Deselect;
        public InputActionMap Get() { return m_Wrapper.m_PuzzleControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PuzzleControlsActions set) { return set.Get(); }
        public void SetCallbacks(IPuzzleControlsActions instance)
        {
            if (m_Wrapper.m_PuzzleControlsActionsCallbackInterface != null)
            {
                @MoveShape.started -= m_Wrapper.m_PuzzleControlsActionsCallbackInterface.OnMoveShape;
                @MoveShape.performed -= m_Wrapper.m_PuzzleControlsActionsCallbackInterface.OnMoveShape;
                @MoveShape.canceled -= m_Wrapper.m_PuzzleControlsActionsCallbackInterface.OnMoveShape;
                @RotateBlock.started -= m_Wrapper.m_PuzzleControlsActionsCallbackInterface.OnRotateBlock;
                @RotateBlock.performed -= m_Wrapper.m_PuzzleControlsActionsCallbackInterface.OnRotateBlock;
                @RotateBlock.canceled -= m_Wrapper.m_PuzzleControlsActionsCallbackInterface.OnRotateBlock;
                @RotateView.started -= m_Wrapper.m_PuzzleControlsActionsCallbackInterface.OnRotateView;
                @RotateView.performed -= m_Wrapper.m_PuzzleControlsActionsCallbackInterface.OnRotateView;
                @RotateView.canceled -= m_Wrapper.m_PuzzleControlsActionsCallbackInterface.OnRotateView;
                @ToggleTiltAngle.started -= m_Wrapper.m_PuzzleControlsActionsCallbackInterface.OnToggleTiltAngle;
                @ToggleTiltAngle.performed -= m_Wrapper.m_PuzzleControlsActionsCallbackInterface.OnToggleTiltAngle;
                @ToggleTiltAngle.canceled -= m_Wrapper.m_PuzzleControlsActionsCallbackInterface.OnToggleTiltAngle;
                @ToggleSelection.started -= m_Wrapper.m_PuzzleControlsActionsCallbackInterface.OnToggleSelection;
                @ToggleSelection.performed -= m_Wrapper.m_PuzzleControlsActionsCallbackInterface.OnToggleSelection;
                @ToggleSelection.canceled -= m_Wrapper.m_PuzzleControlsActionsCallbackInterface.OnToggleSelection;
                @Pause.started -= m_Wrapper.m_PuzzleControlsActionsCallbackInterface.OnPause;
                @Pause.performed -= m_Wrapper.m_PuzzleControlsActionsCallbackInterface.OnPause;
                @Pause.canceled -= m_Wrapper.m_PuzzleControlsActionsCallbackInterface.OnPause;
                @Select.started -= m_Wrapper.m_PuzzleControlsActionsCallbackInterface.OnSelect;
                @Select.performed -= m_Wrapper.m_PuzzleControlsActionsCallbackInterface.OnSelect;
                @Select.canceled -= m_Wrapper.m_PuzzleControlsActionsCallbackInterface.OnSelect;
                @Deselect.started -= m_Wrapper.m_PuzzleControlsActionsCallbackInterface.OnDeselect;
                @Deselect.performed -= m_Wrapper.m_PuzzleControlsActionsCallbackInterface.OnDeselect;
                @Deselect.canceled -= m_Wrapper.m_PuzzleControlsActionsCallbackInterface.OnDeselect;
            }
            m_Wrapper.m_PuzzleControlsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @MoveShape.started += instance.OnMoveShape;
                @MoveShape.performed += instance.OnMoveShape;
                @MoveShape.canceled += instance.OnMoveShape;
                @RotateBlock.started += instance.OnRotateBlock;
                @RotateBlock.performed += instance.OnRotateBlock;
                @RotateBlock.canceled += instance.OnRotateBlock;
                @RotateView.started += instance.OnRotateView;
                @RotateView.performed += instance.OnRotateView;
                @RotateView.canceled += instance.OnRotateView;
                @ToggleTiltAngle.started += instance.OnToggleTiltAngle;
                @ToggleTiltAngle.performed += instance.OnToggleTiltAngle;
                @ToggleTiltAngle.canceled += instance.OnToggleTiltAngle;
                @ToggleSelection.started += instance.OnToggleSelection;
                @ToggleSelection.performed += instance.OnToggleSelection;
                @ToggleSelection.canceled += instance.OnToggleSelection;
                @Pause.started += instance.OnPause;
                @Pause.performed += instance.OnPause;
                @Pause.canceled += instance.OnPause;
                @Select.started += instance.OnSelect;
                @Select.performed += instance.OnSelect;
                @Select.canceled += instance.OnSelect;
                @Deselect.started += instance.OnDeselect;
                @Deselect.performed += instance.OnDeselect;
                @Deselect.canceled += instance.OnDeselect;
            }
        }
    }
    public PuzzleControlsActions @PuzzleControls => new PuzzleControlsActions(this);

    // Menu
    private readonly InputActionMap m_Menu;
    private IMenuActions m_MenuActionsCallbackInterface;
    private readonly InputAction m_Menu_Choose;
    private readonly InputAction m_Menu_Select;
    public struct MenuActions
    {
        private @NewPlayerInput m_Wrapper;
        public MenuActions(@NewPlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Choose => m_Wrapper.m_Menu_Choose;
        public InputAction @Select => m_Wrapper.m_Menu_Select;
        public InputActionMap Get() { return m_Wrapper.m_Menu; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MenuActions set) { return set.Get(); }
        public void SetCallbacks(IMenuActions instance)
        {
            if (m_Wrapper.m_MenuActionsCallbackInterface != null)
            {
                @Choose.started -= m_Wrapper.m_MenuActionsCallbackInterface.OnChoose;
                @Choose.performed -= m_Wrapper.m_MenuActionsCallbackInterface.OnChoose;
                @Choose.canceled -= m_Wrapper.m_MenuActionsCallbackInterface.OnChoose;
                @Select.started -= m_Wrapper.m_MenuActionsCallbackInterface.OnSelect;
                @Select.performed -= m_Wrapper.m_MenuActionsCallbackInterface.OnSelect;
                @Select.canceled -= m_Wrapper.m_MenuActionsCallbackInterface.OnSelect;
            }
            m_Wrapper.m_MenuActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Choose.started += instance.OnChoose;
                @Choose.performed += instance.OnChoose;
                @Choose.canceled += instance.OnChoose;
                @Select.started += instance.OnSelect;
                @Select.performed += instance.OnSelect;
                @Select.canceled += instance.OnSelect;
            }
        }
    }
    public MenuActions @Menu => new MenuActions(this);
    private int m_KeyBoardSchemeIndex = -1;
    public InputControlScheme KeyBoardScheme
    {
        get
        {
            if (m_KeyBoardSchemeIndex == -1) m_KeyBoardSchemeIndex = asset.FindControlSchemeIndex("KeyBoard");
            return asset.controlSchemes[m_KeyBoardSchemeIndex];
        }
    }
    private int m_GamePadSchemeIndex = -1;
    public InputControlScheme GamePadScheme
    {
        get
        {
            if (m_GamePadSchemeIndex == -1) m_GamePadSchemeIndex = asset.FindControlSchemeIndex("GamePad");
            return asset.controlSchemes[m_GamePadSchemeIndex];
        }
    }
    public interface IPuzzleControlsActions
    {
        void OnMoveShape(InputAction.CallbackContext context);
        void OnRotateBlock(InputAction.CallbackContext context);
        void OnRotateView(InputAction.CallbackContext context);
        void OnToggleTiltAngle(InputAction.CallbackContext context);
        void OnToggleSelection(InputAction.CallbackContext context);
        void OnPause(InputAction.CallbackContext context);
        void OnSelect(InputAction.CallbackContext context);
        void OnDeselect(InputAction.CallbackContext context);
    }
    public interface IMenuActions
    {
        void OnChoose(InputAction.CallbackContext context);
        void OnSelect(InputAction.CallbackContext context);
    }
}
